rang
rang = rows_data1[1,]
rang
rang = rows_data1[1,(2:3)]
rang
rang
combined_data1 = slice(combined_data1, rang)
rang = c(rows_data1[1,2]:rows_data1[1,3])
rang
rang = c(rows_data1[1,2]:rows_data1[1,3])
rows_data1[1,2]
head(combined_data1)
rows_data1[1,2]
rows_data1[[1,2]]
rang = c(rows_data1[[1,2]]:rows_data1[[1,3]])
rang
combined_data1 = slice(combined_data1, rang)
combined_data1
combined_data1 = read_tsv("data/combined_data_1.txt", col_names=FALSE)
combined_data1 = slice(combined_data1, rang)
combined_data1
rows_data1 = filter(filas_ID_combined_all, data == 1)
rows_data1
rows_data1 = filter(filas_ID_combined_all, data == 1) %>%
select(filas_ID_combined_all, fila, fila_final)
rows_data1 = select(filas_ID_combined_all, fila, fila_final) %>%
filter(filas_ID_combined_all, data == 1)
rows_data1 = select(filas_ID_combined_all, fila, fila_final)
rows_data1
rows_data1 = filter(filas_ID_combined_all, data == 1)
rows_data1 = filter(filas_ID_combined_all, data == 1)
rows_data1
rows_data1 = select(rows_data1, fila, fila_final)
rows_data1
rows_data1[rows_data1$fila:rows_data1$fila_final]
c(rows_data1$fila:rows_data1$fila_final)
ranges =  sapply(rows_data1 ,c(rows_data1$fila:rows_data1$fila_final))
ranges =  apply(rows_data1,c(rows_data1$fila:rows_data1$fila_final))
ranges =  apply(rows_data1,FUN = c(rows_data1$fila:rows_data1$fila_final))
ranges = apply(rows_data1,FUN = c(fila:fila_final))
ranges = apply(rows_data1, FUN = c())
apply
ranges = apply(rows_data1,c())
ranges = apply(rows_data1,FUN=c())
ranges = c(rows_data1$fila:rows_data1$fila_final)
length(rows_data1)
rows_data1 = filter(filas_ID_combined_all, data == 1)
rows_data1 = select(rows_data1, fila, fila_final)
length(rows_data1)
rows_data1
nrow(rows_data1)
for(i in 1:nrow(rows_data1)){
ranges = ranges + c(rows_data1[[i,1]]:rows_data1[[i,2]])
}
for(i in 1:nrow(rows_data1)){
ranges = ranges + i
}
ranges
ranges = null
ranges = 0
for(i in 1:nrow(rows_data1)){
ranges = ranges + i
}
ranges
nrow(rows_data1)
for(i in 1:nrow(rows_data1)){
ranges = c(ranges, rows_data1[[i,1]]:rows_data1[[i,2]])
}
ranges
combined_data1 = read_tsv("data/combined_data_1.txt", col_names=FALSE)
#Obtenemos nuestra muestra de películas
muestra_grupo = sample(1:17770, 250, replace = FALSE)
#Nos quedamos con el índice de las películas de nuestra muestra
filas_ID_combined_all = filter(filas_ID_combined_all, filas_ID_combined_all$ID %in% muestra_grupo)
filas_ID_combined_all = select(filas_ID_combined_all, ID, fila, fila_final, data)
#Mostramos cuántas películas debemos leer de cada fichero
table(filas_ID_combined_all$data)
rows_data1 = filter(filas_ID_combined_all, data == 1)
rows_data1 = select(rows_data1, fila, fila_final)
#Nos quedamos con el índice de las películas de nuestra muestra
filas_ID_combined_all = filter(filas_ID_combined_all, filas_ID_combined_all$ID %in% muestra_grupo)
filas_ID_combined_all = select(filas_ID_combined_all, ID, fila, fila_final, data)
#Obtenemos nuestra muestra de películas
muestra_grupo = sample(1:17770, 250, replace = FALSE)
#Leemos el índice
filas_ID_combined_all = read_csv("data/filas_ID_combined_all.txt")
#Nos quedamos con el índice de las películas de nuestra muestra
filas_ID_combined_all = filter(filas_ID_combined_all, filas_ID_combined_all$ID %in% muestra_grupo)
filas_ID_combined_all = select(filas_ID_combined_all, ID, fila, fila_final, data)
#Mostramos cuántas películas debemos leer de cada fichero
table(filas_ID_combined_all$data)
set.seed(2495)
#Obtenemos nuestra muestra de películas
muestra_grupo = sample(1:17770, 250, replace = FALSE)
#Nos quedamos con el índice de las películas de nuestra muestra
filas_ID_combined_all = filter(filas_ID_combined_all, filas_ID_combined_all$ID %in% muestra_grupo)
filas_ID_combined_all = select(filas_ID_combined_all, ID, fila, fila_final, data)
#Mostramos cuántas películas debemos leer de cada fichero
table(filas_ID_combined_all$data)
#Leemos el índice
filas_ID_combined_all = read_csv("data/filas_ID_combined_all.txt")
#Nos quedamos con el índice de las películas de nuestra muestra
filas_ID_combined_all = filter(filas_ID_combined_all, filas_ID_combined_all$ID %in% muestra_grupo)
filas_ID_combined_all = select(filas_ID_combined_all, ID, fila, fila_final, data)
#Mostramos cuántas películas debemos leer de cada fichero
table(filas_ID_combined_all$data)
rows_data1 = filter(filas_ID_combined_all, data == 1)
rows_data1 = select(rows_data1, fila, fila_final)
ranges = c(rows_data1$fila:rows_data1$fila_final)
ranges = c()
for(i in 1:nrow(rows_data1)){
ranges = c(ranges, rows_data1[[i,1]]:rows_data1[[i,2]])
}
ranges
combined_data1 = slice(combined_data1, ranges)
combined_data1
View(combined_data1)
dataframe = combined_data1
#Se asigna una posición a cada observación para posteriormente indicar el id de película de cada una de ellas
dataframe = dataframe %>%
mutate(Idx = row_number())
#Guardamos la fila donde empieza cada película
movie_rows = grep(":", dataframe$X1)
#Añadimos el id de la película a cada posición y eliminamos el caracter ":"
rows_ID = dataframe %>%
filter(Idx %in% movie_rows) %>%
mutate(X1 = as.integer(gsub(":","",X1)))
#Número de veces que se tendrá que repetir el identificador de cada película
reps = diff(c(rows_ID$Idx, max(dataframe$Idx) + 1))
df = dataframe %>%
mutate(MovieID = rep(rows_ID$X1, times = reps)) %>%
filter(!(Idx %in% rows_ID))
df = dataframe %>%
mutate(MovieID = rep(rows_ID$X1, times = reps)) %>%
filter(!(Idx %in% rows_ID))
#Se definen las columnas del dataframe
df = df %>%
separate(X1,into = c("UserID","Rating","RatingDate"), sep = ",") %>%
na.omit(df) %>%
mutate(Idx = row_number())
View(df)
table(df$MovieID)
sum(table(df$MovieID))
a = table(df$MovieID)
#Mostramos cuántas películas debemos leer de cada fichero
table(filas_ID_combined_all$data)
obtain_movies = function(combined_data, idx){
rows_data = filter(filas_ID_combined_all, data == idx)
rows_data = select(rows_data, fila, fila_final)
ranges = c()
for(i in 1:nrow(rows_data)){
ranges = c(ranges, rows_data[[i,1]]:rows_data[[i,2]])
}
combined_data = slice(combined_data, ranges)
result(combined_data)
}
data1 = obtain_movies(combined_data1, 1)
obtain_movies = function(combined_data, idx){
rows_data = filter(filas_ID_combined_all, data == idx)
rows_data = select(rows_data, fila, fila_final)
ranges = c()
for(i in 1:nrow(rows_data)){
ranges = c(ranges, rows_data[[i,1]]:rows_data[[i,2]])
}
combined_data = slice(combined_data, ranges)
return(combined_data)
}
data1 = obtain_movies(combined_data1, 1)
View(data1)
#Leemos el índice
filas_ID_combined_all = read_csv("data/filas_ID_combined_all.txt")
#Leemos el índice
filas_ID_combined_all = read_csv("data/filas_ID_combined_all.txt")
combined_data1 = read_tsv("data/combined_data_1.txt", col_names=FALSE)
combined_data2 = read_tsv("data/combined_data_2.txt", col_names=FALSE)
combined_data2 = read_tsv("data/combined_data_2.txt", col_names=FALSE)
combined_data3 = read_tsv("data/combined_data_3.txt", col_names=FALSE)
combined_data3 = read_tsv("data/combined_data_3.txt", col_names=FALSE)
combined_data4 = read_tsv("data/combined_data_4.txt", col_names=FALSE)
#Obtenemos nuestra muestra de películas
muestra_grupo = sample(1:17770, 250, replace = FALSE)
#Mostramos cuántas películas debemos leer de cada fichero
table(filas_ID_combined_all$data)
#Nos quedamos con el índice de las películas de nuestra muestra
filas_ID_combined_all = filter(filas_ID_combined_all, filas_ID_combined_all$ID %in% muestra_grupo)
filas_ID_combined_all = select(filas_ID_combined_all, ID, fila, fila_final, data)
#Mostramos cuántas películas debemos leer de cada fichero
table(filas_ID_combined_all$data)
obtain_movies = function(combined_data, idx){
rows_data = filter(filas_ID_combined_all, data == idx)
rows_data = select(rows_data, fila, fila_final)
ranges = c()
for(i in 1:nrow(rows_data)){
ranges = c(ranges, rows_data[[i,1]]:rows_data[[i,2]])
}
combined_data = slice(combined_data, ranges)
return(combined_data)
}
data1 = obtain_movies(combined_data1, 1)
View(data1)
dataframe = data1
#Se asigna una posición a cada observación para posteriormente indicar el id de película de cada una de ellas
dataframe = dataframe %>%
mutate(Idx = row_number())
#Guardamos la fila donde empieza cada película
movie_rows = grep(":", dataframe$X1)
#Añadimos el id de la película a cada posición y eliminamos el caracter ":"
rows_ID = dataframe %>%
filter(Idx %in% movie_rows) %>%
mutate(X1 = as.integer(gsub(":","",X1)))
#Número de veces que se tendrá que repetir el identificador de cada película
reps = diff(c(rows_ID$Idx, max(dataframe$Idx) + 1))
df = dataframe %>%
mutate(MovieID = rep(rows_ID$X1, times = reps)) %>%
filter(!(Idx %in% rows_ID))
#Se definen las columnas del dataframe
df = df %>%
separate(X1,into = c("UserID","Rating","RatingDate"), sep = ",") %>%
na.omit(df) %>%
mutate(Idx = row_number())
#Se definen las columnas del dataframe
df = df %>%
separate(X1,into = c("UserID","Rating","RatingDate"), sep = ",") %>%
na.omit(df) %>%
mutate(Idx = row_number())
table(df$MovieID)
a = table(df$MovieID)
data2 = obtain_movies(combined_data2, 2)
#Mostramos cuántas películas debemos leer de cada fichero
table(filas_ID_combined_all$data)
dataframe = data2
#Se asigna una posición a cada observación para posteriormente indicar el id de película de cada una de ellas
dataframe = dataframe %>%
mutate(Idx = row_number())
#Guardamos la fila donde empieza cada película
movie_rows = grep(":", dataframe$X1)
#Añadimos el id de la película a cada posición y eliminamos el caracter ":"
rows_ID = dataframe %>%
filter(Idx %in% movie_rows) %>%
mutate(X1 = as.integer(gsub(":","",X1)))
#Número de veces que se tendrá que repetir el identificador de cada película
reps = diff(c(rows_ID$Idx, max(dataframe$Idx) + 1))
df = dataframe %>%
mutate(MovieID = rep(rows_ID$X1, times = reps)) %>%
filter(!(Idx %in% rows_ID))
#Se definen las columnas del dataframe
df = df %>%
separate(X1,into = c("UserID","Rating","RatingDate"), sep = ",") %>%
na.omit(df) %>%
mutate(Idx = row_number())
d = data1+data2
d = rbind(data1,data2,data3,data4)
data3 = obtain_movies(combined_data3, 3)
data4 = obtain_movies(combined_data4, 4)
d = rbind(data1,data2,data3,data4)
dataframe = d
#Se asigna una posición a cada observación para posteriormente indicar el id de película de cada una de ellas
dataframe = dataframe %>%
mutate(Idx = row_number())
#Guardamos la fila donde empieza cada película
movie_rows = grep(":", dataframe$X1)
#Añadimos el id de la película a cada posición y eliminamos el caracter ":"
rows_ID = dataframe %>%
filter(Idx %in% movie_rows) %>%
mutate(X1 = as.integer(gsub(":","",X1)))
#Número de veces que se tendrá que repetir el identificador de cada película
reps = diff(c(rows_ID$Idx, max(dataframe$Idx) + 1))
df = dataframe %>%
mutate(MovieID = rep(rows_ID$X1, times = reps)) %>%
filter(!(Idx %in% rows_ID))
df = dataframe %>%
mutate(MovieID = rep(rows_ID$X1, times = reps)) %>%
filter(!(Idx %in% rows_ID))
#Se definen las columnas del dataframe
df = df %>%
separate(X1,into = c("UserID","Rating","RatingDate"), sep = ",") %>%
na.omit(df) %>%
mutate(Idx = row_number())
df = dataframe %>%
mutate(MovieID = rep(rows_ID$X1, times = reps)) %>%
filter(!(Idx %in% rows_ID))
#Se definen las columnas del dataframe
df = df %>%
separate(X1,into = c("UserID","Rating","RatingDate"), sep = ",") %>%
na.omit(df) %>%
mutate(Idx = row_number())
#Se eliminan las variables auxiliares
rm(dataframe, movie_rows, rows_ID, reps)
a = table(df$MovieID)
a
#Se transforma la variable 'Rating' a tipo númerica
df$Rating = as.numeric(df$Rating)
#Se transforma la variable 'RatingDate' a tipo date
df$RatingDate = as.Date(df$RatingDate, format = "%Y-%m-%d")
#Se unifica el dataframe de las puntuaciones con el de las películas
df = merge(x = df, y = df_movies, by = "MovieID", all = TRUE)
df_movies = read_csv("data/movie_titles.csv", col_names = FALSE)
#Se unifica el dataframe de las puntuaciones con el de las películas
df = merge(x = df, y = df_movies, by = "MovieID", all = TRUE)
#Se transforma la variable 'Rating' a tipo númerica
df$Rating = as.numeric(df$Rating)
#Se transforma la variable 'RatingDate' a tipo date
df$RatingDate = as.Date(df$RatingDate, format = "%Y-%m-%d")
#Se unifica el dataframe de las puntuaciones con el de las películas
df = merge(x = df, y = df_movies, by = "MovieID", all = TRUE)
df_movies = df_movies %>%
rename(
MovieID = X1,
MovieRelease = X2,
Title = X3
)
#Se unifica el dataframe de las puntuaciones con el de las películas
df = merge(x = df, y = df_movies, by = "MovieID", all = TRUE)
View(turismo)
sum3
knitr::opts_chunk$set(echo = TRUE)
fit3 = lm(points ~ exper + expersq, data = nbasal)
sum3 = summary(fit3)
knitr::opts_chunk$set(echo = TRUE)
turismo = read.csv2("Datos Turismo.csv", dec = ".")
fit1 = lm(log_llegadas ~ unesco, data = turismo)
sum1 = summary(fit1)
ic1 = confint(fit1, level = 0.90)
df_aux1 = data.frame(unesco = 30)
predict1 = predict(fit1, newdata = df_aux1)
#Seguidamente calculamos la predicción por intervalo:
predict1_int = predict(fit1, newdata = df_aux1, interval = "prediction")
df_aux2 = data.frame(unesco = turismo$unesco[87])
predict2 = predict(fit1, newdata = df_aux2)
#Seguidamente calculamos la predicción por intervalo:
predict2_int = predict(fit1, newdata = df_aux2, interval = "prediction")
predict3 = predict(fit1, newdata = df_aux2, level = 0.99)
predict3_int = predict(fit1, newdata = df_aux2, interval = "prediction", level = 0.99)
library(wooldridge)
data(nbasal)
fit2 = lm(points ~ exper + expersq + age + coll, data = nbasal)
sum2 = summary(fit2)
sum2$coefficients[,1:2]
fit3 = lm(points ~ exper + expersq, data = nbasal)
sum3 = summary(fit3)
fit4 = lm(points ~ exper + expersq + age + I(age^2) + coll, data = nbasal)
sum4 = summary(fit4)
fit5 = lm(lwage ~ points + exper + expersq + age + coll, data = nbasal)
sum5 = summary(fit5)
sum5$coefficients[,1:2]
sum3
sum2
sum2
punto_inf = abs(sum2$coefficients[2,1]/2*sum2$coefficients[3,1])
sum2$coefficients[2,1]
sum2$coefficients[3,1]
2*sum2$coefficients[3,1]
sum2$coefficients[2,1] / -0.1540537
abs(sum2$coefficients[2,1]/(2*sum2$coefficients[3,1]))
punto_inf = abs(sum2$coefficients[2,1]/(2*sum2$coefficients[3,1]))
fit3 = lm(points ~ exper + expersq + age + I(age^2) + coll, data = nbasal)
sum3 = summary(fit3)
sum3
sum4
sum4
fit4 = lm(lwage ~ points + exper + expersq + age + coll, data = nbasal)
sum4 = summary(fit4)
sum4
fit5 = lm(points ~ exper + expersq + forward + center | guard, data = nbasal)
sum5 = summary(fit5)
sum5
fit5 = lm(points ~ exper + expersq + forward + center, data = nbasal)
sum5 = summary(fit5)
sum5$coefficients[,1:2]
sum5
sum5$coefficients[1,1]
points_guard = sum5$coefficients[1,1] + sum5$coefficients[1,2] + sum5$coefficients[1,3]
points_center = sum5$coefficients[1,1] + sum5$coefficients[1,2] + sum5$coefficients[1,3] + sum5$coefficients[1,5]
sum5$coefficients[1,4]
sum5$coefficients[5,1]
points_guard = sum5$coefficients[1,1] + sum5$coefficients[2,1] + sum5$coefficients[3,1]
points_center = sum5$coefficients[1,1] + sum5$coefficients[2,1] + sum5$coefficients[3,1] + sum5$coefficients[5,1]
sum5$fstatistic
sum5$adj.r.squared
fit6 = lm(points ~ exper + expersq + forward + center + marr, data = nbasal)
sum6 = summary(fit6)
sum6
points_marr = sum6$coefficients[1,1] + sum6$coefficients[2,1] + sum6$coefficients[3,1] + sum6$coefficients[6,1]
fit7 = lm(points ~ exper + expersq + forward + center + marr + I(exper*marr) + I(expersq*marr), data = nbasal)
sum7 = summary(fit7)
sum7
sum6
fit7 = lm(assists ~ exper + expersq + forward + center + marr, data = nbasal)
sum7 = summary(fit7)
sum7
fit8 = lm(assists ~ exper + expersq + forward + center + marr, data = nbasal)
sum8 = summary(fit8)
fit8 = lm(assists ~ exper + expersq + forward + center + marr, data = nbasal)
sum8
sum8 = summary(fit8)
sum8
sum6
sum8
anova(fit6,fit8)
fit8
sum8
sum6
data(wage)
library(wooldridge)
data(nbasal)
data(wage)
install. packages("ISLR")
install.packages("ISLR")
data(wage)
library(wooldridge)
data(wage)
library(ISLR)
data(wage)
data(wage2)
force(wage2)
View(wage2)
fit9 = lm(lwage ~ educ + exper + tenure + married + black + south + urban)
fit9 = lm(lwage ~ educ + exper + tenure + married + black + south + urban, data = wage2)
sum9 = summary(fit9)
sum9$coefficients[,1:2]
sum9
sum5
sum9
?wage2
fit10 = lm(lwage ~ educ + exper + I(exper^2) + tenure + I(tenure^2) + married + black + south + urban, data = wage2)
sum10 = summary(fit10)
sum10
anova(fit9, fit10)
fit11 = lm(lwage ~ educ + educ*black + exper + tenure + married + black + south + urban, data = wage2)
sum11 = summary(fit11)
sum11
sum9
fit12 = lm(lwage ~ educ + exper + tenure + married + black + south + urban + I(black*married), data = wage2)
sum12 = summary(fit12)
sum12
data(sleep75)
force(sleep75)
View(sleep75)
?sleep75
fit14 = lm(sleep ~ totwrk + educ + age + I(age^2) + yngkid + male, data = sleep75)
fit13 = lm(sleep ~ totwrk + educ + age + I(age^2) + yngkid , data = sleep75)
sum13 = summary(fit13)
fit14 = lm(sleep ~ totwrk + educ + age + I(age^2) + yngkid + male, data = sleep75)
sum14 = summary(fit14)
sum13$coefficients[,1:2]
sum14$coefficients[,1:2]
sum13
sum14
View(wage2)
View(sleep75)
sum14
anova(fit13, fit14)
a = anova(fit13, fit14)
a
a$`Pr(>F)`
sum12
fit4b =  lm(lwage ~ points + exper + expersq, data = nbasal)
anova(fit4,fit4b)
sum12
rm(list=ls())
cat("\014") ## limpia la pantalla del R
set.seed(2495)
#Cargamos
combined_data1 = read_tsv("data/combined_data_1.txt", col_names=FALSE)
setwd("~/Master/Tecnologías/Proyectos/DataAnalysis_NetflixPrizeData")
knitr::opts_chunk$set(echo = TRUE)
knitr::kable
library(tidyverse)
library(tidyverse)
library(lubridate) #Trabajar con fechas
library(ggimage) #Gggplot images
library(magick)
library(knitr) # dynamic report generation
library(gridExtra) # miscellaneous Functions for "Grid" Graphics
library(grid) # add Grid to a Plot
rm(list=ls())
cat("\014") ## limpia la pantalla del R
set.seed(2495)
#Leemos el índice
filas_ID_combined_all = read_csv("data/filas_ID_combined_all.txt")
#Cargamos los ficheros con la información de Netflix
combined_data1 = read_tsv("data/combined_data_1.txt", col_names=FALSE)
combined_data2 = read_tsv("data/combined_data_2.txt", col_names=FALSE)
combined_data3 = read_tsv("data/combined_data_3.txt", col_names=FALSE)
combined_data4 = read_tsv("data/combined_data_4.txt", col_names=FALSE)
#Obtenemos nuestra muestra de películas
n_muestra = 250
muestra_grupo = sample(1:17770, n_muestra, replace = FALSE)
#Función que obtiene los datos de filas específicas
obtain_movies = function(combined_data, idx){
#Obtenemos las películas del archivo a leer (1,2,3 o 4)
rows_data = filter(filas_ID_combined_all, data == idx)
rows_data = select(rows_data, fila, fila_final)
#Por cada fila guardamos el rango de posiciones a leer en el fichero
ranges = c()
for(i in 1:nrow(rows_data)){
ranges = c(ranges, rows_data[[i,1]]:rows_data[[i,2]])
}
#Nos quedamos solo con los datos de las películas de la muestra
combined_data = slice(combined_data, ranges)
return(combined_data)
}
#Leemos las observaciones de las películas de nuestra muestra
data1 = obtain_movies(combined_data1, 1)
head(df_ratings)
head(df_ratings, 10)
#Juntamos los datos de las películas de los 4 ficheros
df_ratings = rbind(data1,data2,data3,data4)
#Leemos las observaciones de las películas de nuestra muestra
data1 = obtain_movies(combined_data1, 1)
#Leemos las observaciones de las películas de nuestra muestra
data1 = obtain_movies(combined_data1, 1)
